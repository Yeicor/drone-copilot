name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write # Required to upload artifacts to releases (and pushing the version update)

jobs:
  update-version:
    name: Update version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'master' # HACK: Should be the tag, but we are making a push to master
      - name: Auto-update __version__ and move the release tag
        run: |
          export VERSION="${GITHUB_REF##*/}"
          sed -E -i "s/^__version__ = '.*'$/__version__ = '${VERSION:1}'/" src/main.py  # e.g. v0.0.1 -> version = "0.0.1"
          git config --global user.email "yeicor@users.noreply.github.com"
          git config --global user.name "Yeicor"
          if git commit -am "Update __version__ to ${VERSION:1} (automatic)"; then
            git push
            # Move the tag to the new commit
            git tag -f -a "$VERSION" -m "$VERSION"
            git push -f --tags # Force push the tag to GitHub
            # The tag move will NOT trigger a new workflow
          else
            echo "No change to the version (did you repeat a release tag??)"
            exit 1
          fi

  build-mobile:
    name: Builds for mobile
    runs-on: '${{ matrix.os }}'
    needs:
      - update-version
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android
          - os: ubuntu-latest
            buildozer_command: android debug
          # iOS  # TODO
          #- os: macos-latest
          #  buildozer_command: ios debug
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: 3.9
          cache: poetry
      - name: Buildozer cache
        uses: actions/cache@v2
        with:
          path: ~/.buildozer
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-buildozer-${{ hashFiles('buildozer.spec') }}

      - name: Install system dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
          # Enable ALL architectures for android builds
          sed -E -i 's/^android.archs = .*$/android.archs = armeabi-v7a,arm64-v8a,x86,x86_64/g' buildozer.spec 

      - name: Install system dependencies (macos)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config sdl2 sdl2_image sdl2_ttf sdl2_mixer gstreamer autoconf automake
          python3 -m pip install --upgrade kivy-ios
          cat requirements.txt | sed -E "s/tensorflow-gpu==.*/tensorflow-macos/" >requirements2.txt
          mv requirements2.txt requirements.txt

      - name: Install python dependencies
        run: poetry install --with build-mobile --without main

      - name: Build with Buildozer
        continue-on-error: true  # See hack below
        run: yes | poetry run buildozer ${{ matrix.buildozer_command }}

      - name: 'HACK: fix buildozer build after first try' # TODO: Remove when https://github.com/kivy/python-for-android/commit/cdbee357d3425b53de75d60d1d1a9d21a2c4730b is released
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo sed -E -i "s/(openssl_prereq.pkg_config_location, env.*)/[\1]/" \
          .buildozer/android/platform/python-for-android/pythonforandroid/recipes/hostpython3/__init__.py

      - name: Build with Buildozer
        if: matrix.os == 'ubuntu-latest'
        run: poetry run buildozer ${{ matrix.buildozer_command }}

      - name: Publish the build
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*
          token: ${{ secrets.GITHUB_TOKEN }}


  build-desktop:
    name: Builds for desktop
    runs-on: '${{ matrix.os }}'
    needs:
      - update-version
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            deps: |
              sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev \
              libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev libgstreamer1.0 gstreamer1.0-plugins-base \
              gstreamer1.0-plugins-good libmtdev-dev xvfb upx
              echo "DISPLAY=:99.0" >> $GITHUB_ENV
              Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          # Mac OS x86_64  # TODO
          #- os: macos-latest
          #  deps: ''
          # Windows x86_64
          - os: windows-latest
            deps: |
              # Complete installation by adding poetry to the path
              echo "C:\Users\runneradmin\AppData\Roaming\Python\Scripts" >> $GITHUB_PATH
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - uses: actions/setup-python@v4
        if: matrix.os != 'windows-latest' # Caching with setup-python fails on windows, so we do it manually
        with:
          python-version: 3.9
          cache: poetry
      - uses: actions/setup-python@v4
        if: matrix.os == 'windows-latest'
        with:
          python-version: 3.9
      - name: Cache poetry
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
      - name: PyInstaller cache
        uses: actions/cache@v2
        with:
          path: ~/.buildozer
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pyinstaller-${{ hashFiles('pyinstaller.spec') }}

      - name: Install system dependencies
        if: matrix.deps != ''
        shell: bash  # For easier windows support
        run: ${{ matrix.deps }}

      - name: Install python dependencies
        shell: bash
        run: poetry install --with build-desktop

      - name: Build a single executable with PyInstaller
        shell: bash
        run: |
          poetry run python -m PyInstaller pyinstaller.spec
          # Better output names
          mv dist/drone-copilot dist/drone-copilot-$(uname -o -m | tr ' /' '-' | tr '[:upper:]' '[:lower:]') || true

      - name: Publish the build
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          token: ${{ secrets.GITHUB_TOKEN }}